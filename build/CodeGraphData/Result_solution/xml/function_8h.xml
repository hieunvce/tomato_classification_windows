<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="function_8h" kind="file">
    <compoundname>function.h</compoundname>
    <includes local="no">opencv2/opencv.hpp</includes>
    <includes local="no">iostream</includes>
    <includes refid="color_profile_8h" local="yes">colorProfile.h</includes>
    <includedby refid="function_8cpp" local="yes">C:/Users/Henry/Documents/GitHub/tomato_classification/function.cpp</includedby>
    <includedby refid="main_8cpp" local="yes">C:/Users/Henry/Documents/GitHub/tomato_classification/main.cpp</includedby>
    <incdepgraph>
      <node id="20">
        <label>C:/Users/Henry/Documents/GitHub/tomato_classification/function.h</label>
        <link refid="function.h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>opencv2/opencv.hpp</label>
      </node>
      <node id="23">
        <label>colorProfile.h</label>
        <link refid="color_profile_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="24">
        <label>C:/Users/Henry/Documents/GitHub/tomato_classification/function.h</label>
        <link refid="function.h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>C:/Users/Henry/Documents/GitHub/tomato_classification/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="25">
        <label>C:/Users/Henry/Documents/GitHub/tomato_classification/function.cpp</label>
        <link refid="function_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="function_8h_1aa8b334ef12d06c60c70a7a7a5332c2ee" prot="public" static="no">
        <name>MAX_BAD_PIXEL</name>
        <initializer>5000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Henry/Documents/GitHub/tomato_classification/function.h" line="15" column="9" bodyfile="C:/Users/Henry/Documents/GitHub/tomato_classification/function.h" bodystart="15" bodyend="-1"/>
        <referencedby refid="function_8h_1a742665d7d95453ad56253ee8091c7963" compoundref="function_8cpp" startline="172" endline="197">gradeTomato</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="function_8h_1a32c27cc471df37f4fc818d65de0a56c4" prot="public" static="no">
        <name>STATUS</name>
        <enumvalue id="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a936c4a5547a9360243178f726f6b2715" prot="public">
          <name>FAIL</name>
          <initializer>=-1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="function_8h_1a32c27cc471df37f4fc818d65de0a56c4ad2dd9ae53d40a23f5c31049a0aac0396" prot="public">
          <name>SKIP_SUCCESS</name>
          <initializer>=0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a7e8eb9fcc440e84ed79330d0d511c6a2" prot="public">
          <name>RED_NORMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a3e1d0b643141525ab7726a75c0b33c49" prot="public">
          <name>RED_BAD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a0f5b10c2a176fd5585690a8038598f89" prot="public">
          <name>YELLOW_NORMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a742c52635c20c342e71adabdfda0c369" prot="public">
          <name>YELLOW_BAD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a645c6b6a4b4e8b6411079b14a518155a" prot="public">
          <name>GREEN_NORMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a6a7bb408673e07c9fd71397bf814e88c" prot="public">
          <name>GREEN_BAD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Henry/Documents/GitHub/tomato_classification/function.h" line="11" column="1" bodyfile="C:/Users/Henry/Documents/GitHub/tomato_classification/function.h" bodystart="11" bodyend="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="function_8h_1ab403cdaa778201fccc138f0e6ff2255f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SegmentImage</definition>
        <argsstring>(Mat LabImage_8UC3, Mat &amp;segImage_8U, Color &amp;colorID)</argsstring>
        <name>SegmentImage</name>
        <param>
          <type>Mat</type>
          <declname>LabImage_8UC3</declname>
          <defname>LabImage</defname>
        </param>
        <param>
          <type>Mat &amp;</type>
          <declname>segImage_8U</declname>
          <defname>segImage</defname>
        </param>
        <param>
          <type><ref refid="color_profile_8h_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">Color</ref> &amp;</type>
          <declname>colorID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Segment LabImage and find main color of tomato, return at colorID Return: void</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>LabImage</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segImage</parametername>
</parameternamelist>
<parameterdescription>
<para>Result of segmentation process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colorID</parametername>
</parameternamelist>
<parameterdescription>
<para>Main color of tomato </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para><blockquote><para>Begin segmentation process </para></blockquote></para>        </inbodydescription>
        <location file="C:/Users/Henry/Documents/GitHub/tomato_classification/function.h" line="20" column="1" bodyfile="C:/Users/Henry/Documents/GitHub/tomato_classification/function.cpp" bodystart="17" bodyend="60"/>
        <references refid="color_profile_8cpp_1a5ac86ff469e90739f63641939c414f55" compoundref="color_profile_8cpp" startline="44" endline="54">color</references>
        <references refid="color_profile_8h_1ab87bacfdad76e61b9412d7124be44c1caa60bd322f93178d68184e30e162571ca" compoundref="color_profile_8h" startline="17">GREEN</references>
        <references refid="function_8cpp_1a0200fbdd02a74f99ec4dde2910021d22" compoundref="function_8cpp" startline="7">MIN_NUMBER_PIXEL</references>
        <references refid="color_profile_8h_1ab87bacfdad76e61b9412d7124be44c1cadbf1dee1b8cd7ea3c82661943c7b74f4" compoundref="color_profile_8h" startline="17">OTHER</references>
        <references refid="color_profile_8h_1ab87bacfdad76e61b9412d7124be44c1caf80f9a890089d211842d59625e561f88" compoundref="color_profile_8h" startline="17">RED</references>
        <references refid="color_profile_8h_1ab87bacfdad76e61b9412d7124be44c1cae735a848bf82163a19236ead1c3ef2d2" compoundref="color_profile_8h" startline="17">YELLOW</references>
        <referencedby refid="function_8h_1a1d36cded4b486b32db5ae04d3c01eeff" compoundref="function_8cpp" startline="242" endline="283">runOnImage</referencedby>
      </memberdef>
      <memberdef kind="function" id="function_8h_1aedb55be6893890e03c2775a993eb17c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; Point &gt;</type>
        <definition>vector&lt;Point&gt; detectROI</definition>
        <argsstring>(Mat segImage)</argsstring>
        <name>detectROI</name>
        <param>
          <type>Mat</type>
          <declname>segImage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>detectROI: Detect ROI which have tomato in image It returns a contour is the ROI. Return vector&lt;Point&gt; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>segImage</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Henry/Documents/GitHub/tomato_classification/function.h" line="21" column="1" bodyfile="C:/Users/Henry/Documents/GitHub/tomato_classification/function.cpp" bodystart="69" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="function_8h_1aedfc53e08b37cc8ccaf4c705a7c701f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Size2i</type>
        <definition>Size2i calculateSize</definition>
        <argsstring>(vector&lt; Point &gt; ROI)</argsstring>
        <name>calculateSize</name>
        <param>
          <type>vector&lt; Point &gt;</type>
          <declname>ROI</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculateSize: calculate size of tomato (size of ROI) Print size to console Return: Size2i <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ROI</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Henry/Documents/GitHub/tomato_classification/function.h" line="22" column="1" bodyfile="C:/Users/Henry/Documents/GitHub/tomato_classification/function.cpp" bodystart="107" bodyend="117"/>
        <referencedby refid="function_8h_1a1d36cded4b486b32db5ae04d3c01eeff" compoundref="function_8cpp" startline="242" endline="283">runOnImage</referencedby>
      </memberdef>
      <memberdef kind="function" id="function_8h_1ae8d4c04b6c18c68c18dc8b1518d86a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat</type>
        <definition>Mat createMask</definition>
        <argsstring>(Size sizeOfMask, vector&lt; Point &gt; ROI)</argsstring>
        <name>createMask</name>
        <param>
          <type>Size</type>
          <declname>sizeOfMask</declname>
        </param>
        <param>
          <type>vector&lt; Point &gt;</type>
          <declname>ROI</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>createMask: Create a mask image that fill ROI with 255,255,255 Return: Mat image <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sizeOfMask</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ROI</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Henry/Documents/GitHub/tomato_classification/function.h" line="23" column="1" bodyfile="C:/Users/Henry/Documents/GitHub/tomato_classification/function.cpp" bodystart="126" bodyend="134"/>
        <referencedby refid="function_8h_1a1d36cded4b486b32db5ae04d3c01eeff" compoundref="function_8cpp" startline="242" endline="283">runOnImage</referencedby>
      </memberdef>
      <memberdef kind="function" id="function_8h_1ae4879e9efbf23c4fdcb7a24f7a2e3cbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int countBadPixel</definition>
        <argsstring>(Mat LabImage, Mat maskImage)</argsstring>
        <name>countBadPixel</name>
        <param>
          <type>Mat</type>
          <declname>LabImage</declname>
        </param>
        <param>
          <type>Mat</type>
          <declname>maskImage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>countBadPixel: Count number of bad pixels on tomato<itemizedlist>
<listitem><para>Get LabImage[pixel]</para></listitem><listitem><para>If (maskImage[pixel]==1 &amp;&amp; color[pixel]=OTHER) =&gt; badSegImage[pixel]=1, countBadPixel++, else =0</para></listitem><listitem><para>Return: int numberOfBadPixels</para></listitem><listitem><para>In future:</para></listitem><listitem><para>+ Find contours of badSegImage</para></listitem><listitem><para>+ Return: vector&lt;vector&lt;Point&gt; &gt; contains Bad contours <simplesect kind="return"><para></para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Henry/Documents/GitHub/tomato_classification/function.h" line="24" column="1" bodyfile="C:/Users/Henry/Documents/GitHub/tomato_classification/function.cpp" bodystart="146" bodyend="162"/>
        <references refid="color_profile_8cpp_1a5ac86ff469e90739f63641939c414f55" compoundref="color_profile_8cpp" startline="44" endline="54">color</references>
        <references refid="color_profile_8h_1ab87bacfdad76e61b9412d7124be44c1cadbf1dee1b8cd7ea3c82661943c7b74f4" compoundref="color_profile_8h" startline="17">OTHER</references>
        <referencedby refid="function_8h_1a1d36cded4b486b32db5ae04d3c01eeff" compoundref="function_8cpp" startline="242" endline="283">runOnImage</referencedby>
      </memberdef>
      <memberdef kind="function" id="function_8h_1a742665d7d95453ad56253ee8091c7963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4" kindref="member">STATUS</ref></type>
        <definition>STATUS gradeTomato</definition>
        <argsstring>(Color colorID, int nOfBadPixels)</argsstring>
        <name>gradeTomato</name>
        <param>
          <type><ref refid="color_profile_8h_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">Color</ref></type>
          <declname>colorID</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nOfBadPixels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gradeTomato: Grade Tomato base on color and number of bad pixels if (number of pixel &gt; MAX_BAD_PIXEL) then tomato is bad. Return: STATUS is grade of tomato <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colorID</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nOfBadPixels</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Henry/Documents/GitHub/tomato_classification/function.h" line="25" column="1" bodyfile="C:/Users/Henry/Documents/GitHub/tomato_classification/function.cpp" bodystart="172" bodyend="197"/>
        <references refid="color_profile_8h_1ab87bacfdad76e61b9412d7124be44c1caa60bd322f93178d68184e30e162571ca" compoundref="color_profile_8h" startline="17">GREEN</references>
        <references refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a6a7bb408673e07c9fd71397bf814e88c" compoundref="function_8h" startline="12">GREEN_BAD</references>
        <references refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a645c6b6a4b4e8b6411079b14a518155a" compoundref="function_8h" startline="12">GREEN_NORMAL</references>
        <references refid="function_8h_1aa8b334ef12d06c60c70a7a7a5332c2ee" compoundref="function_8h" startline="15">MAX_BAD_PIXEL</references>
        <references refid="color_profile_8h_1ab87bacfdad76e61b9412d7124be44c1caf80f9a890089d211842d59625e561f88" compoundref="color_profile_8h" startline="17">RED</references>
        <references refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a3e1d0b643141525ab7726a75c0b33c49" compoundref="function_8h" startline="12">RED_BAD</references>
        <references refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a7e8eb9fcc440e84ed79330d0d511c6a2" compoundref="function_8h" startline="12">RED_NORMAL</references>
        <references refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4ad2dd9ae53d40a23f5c31049a0aac0396" compoundref="function_8h" startline="11">SKIP_SUCCESS</references>
        <references refid="color_profile_8h_1ab87bacfdad76e61b9412d7124be44c1cae735a848bf82163a19236ead1c3ef2d2" compoundref="color_profile_8h" startline="17">YELLOW</references>
        <references refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a742c52635c20c342e71adabdfda0c369" compoundref="function_8h" startline="12">YELLOW_BAD</references>
        <references refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a0f5b10c2a176fd5585690a8038598f89" compoundref="function_8h" startline="12">YELLOW_NORMAL</references>
        <referencedby refid="function_8h_1a1d36cded4b486b32db5ae04d3c01eeff" compoundref="function_8cpp" startline="242" endline="283">runOnImage</referencedby>
      </memberdef>
      <memberdef kind="function" id="function_8h_1a4ac12e3e318d9cea7de43fdd378aec28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void showInfo</definition>
        <argsstring>(Size2i sizeOfTomato, STATUS grade)</argsstring>
        <name>showInfo</name>
        <param>
          <type>Size2i</type>
          <declname>sizeOfTomato</declname>
        </param>
        <param>
          <type><ref refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4" kindref="member">STATUS</ref></type>
          <declname>grade</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>showInfo: Print to console info about tomato like color, size, number of bad pixels <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tomatoColor</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeOfTomato</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nOfBadPixels</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Henry/Documents/GitHub/tomato_classification/function.h" line="26" column="1" bodyfile="C:/Users/Henry/Documents/GitHub/tomato_classification/function.cpp" bodystart="205" bodyend="230"/>
        <references refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a6a7bb408673e07c9fd71397bf814e88c" compoundref="function_8h" startline="12">GREEN_BAD</references>
        <references refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a645c6b6a4b4e8b6411079b14a518155a" compoundref="function_8h" startline="12">GREEN_NORMAL</references>
        <references refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a3e1d0b643141525ab7726a75c0b33c49" compoundref="function_8h" startline="12">RED_BAD</references>
        <references refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a7e8eb9fcc440e84ed79330d0d511c6a2" compoundref="function_8h" startline="12">RED_NORMAL</references>
        <references refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a742c52635c20c342e71adabdfda0c369" compoundref="function_8h" startline="12">YELLOW_BAD</references>
        <references refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a0f5b10c2a176fd5585690a8038598f89" compoundref="function_8h" startline="12">YELLOW_NORMAL</references>
        <referencedby refid="function_8h_1a1d36cded4b486b32db5ae04d3c01eeff" compoundref="function_8cpp" startline="242" endline="283">runOnImage</referencedby>
      </memberdef>
      <memberdef kind="function" id="function_8h_1a1d36cded4b486b32db5ae04d3c01eeff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat</type>
        <definition>Mat runOnImage</definition>
        <argsstring>(Mat srcImage)</argsstring>
        <name>runOnImage</name>
        <param>
          <type>Mat</type>
          <declname>srcImage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><heading level="2">runOnImage: Run all function on an image </heading>
</para><para>segmentImage -&gt; detecROI -&gt; calculateSize <heading level="2">-&gt; createMask -&gt; countBadPixel -&gt; gradeTomato </heading>
</para><para>Return: grade of tomato or status of function <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>srcImage</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Henry/Documents/GitHub/tomato_classification/function.h" line="27" column="1" bodyfile="C:/Users/Henry/Documents/GitHub/tomato_classification/function.cpp" bodystart="242" bodyend="283"/>
        <references refid="function_8cpp_1aedfc53e08b37cc8ccaf4c705a7c701f1" compoundref="function_8cpp" startline="107" endline="117">calculateSize</references>
        <references refid="function_8cpp_1ae4879e9efbf23c4fdcb7a24f7a2e3cbb" compoundref="function_8cpp" startline="146" endline="162">countBadPixel</references>
        <references refid="function_8cpp_1ae8d4c04b6c18c68c18dc8b1518d86a54" compoundref="function_8cpp" startline="126" endline="134">createMask</references>
        <references refid="function_8cpp_1aedb55be6893890e03c2775a993eb17c2" compoundref="function_8cpp" startline="69" endline="99">detectROI</references>
        <references refid="function_8cpp_1a742665d7d95453ad56253ee8091c7963" compoundref="function_8cpp" startline="172" endline="197">gradeTomato</references>
        <references refid="color_profile_8h_1ab87bacfdad76e61b9412d7124be44c1cadbf1dee1b8cd7ea3c82661943c7b74f4" compoundref="color_profile_8h" startline="17">OTHER</references>
        <references refid="function_8cpp_1adbea5241a0432c4dec27b2f464c9ad43" compoundref="function_8cpp" startline="17" endline="60">SegmentImage</references>
        <references refid="function_8cpp_1a4ac12e3e318d9cea7de43fdd378aec28" compoundref="function_8cpp" startline="205" endline="230">showInfo</references>
        <referencedby refid="main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="main_8cpp" startline="13" endline="58">main</referencedby>
        <referencedby refid="function_8h_1ab0c510222687826611917eb843e29187" compoundref="function_8cpp" startline="292" endline="318">runOnCamera</referencedby>
      </memberdef>
      <memberdef kind="function" id="function_8h_1ab0c510222687826611917eb843e29187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int runOnCamera</definition>
        <argsstring>(VideoCapture camera)</argsstring>
        <name>runOnCamera</name>
        <param>
          <type>VideoCapture</type>
          <declname>camera</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run program on camera or a video To write video, pass writeVideo=1 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>camera</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>writeVideo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Henry/Documents/GitHub/tomato_classification/function.h" line="28" column="1" bodyfile="C:/Users/Henry/Documents/GitHub/tomato_classification/function.cpp" bodystart="292" bodyend="318"/>
        <references refid="function_8cpp_1a1d36cded4b486b32db5ae04d3c01eeff" compoundref="function_8cpp" startline="242" endline="283">runOnImage</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>hieunguyen<sp/>on<sp/>6/14/18.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opencv2/opencv.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="color_profile_8h" kindref="compound">colorProfile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">cv;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4" kindref="member">STATUS</ref>{<sp/><ref refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a936c4a5547a9360243178f726f6b2715" kindref="member">FAIL</ref>=-1,<sp/><ref refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4ad2dd9ae53d40a23f5c31049a0aac0396" kindref="member">SKIP_SUCCESS</ref>=0,</highlight></codeline>
<codeline lineno="12" refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a0f5b10c2a176fd5585690a8038598f89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a7e8eb9fcc440e84ed79330d0d511c6a2" kindref="member">RED_NORMAL</ref>,<sp/><ref refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a3e1d0b643141525ab7726a75c0b33c49" kindref="member">RED_BAD</ref>,<sp/><ref refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a0f5b10c2a176fd5585690a8038598f89" kindref="member">YELLOW_NORMAL</ref>,<sp/><ref refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a742c52635c20c342e71adabdfda0c369" kindref="member">YELLOW_BAD</ref>,<sp/><ref refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a645c6b6a4b4e8b6411079b14a518155a" kindref="member">GREEN_NORMAL</ref>,<sp/><ref refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4a6a7bb408673e07c9fd71397bf814e88c" kindref="member">GREEN_BAD</ref></highlight></codeline>
<codeline lineno="13"><highlight class="normal">};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="function_8h_1aa8b334ef12d06c60c70a7a7a5332c2ee" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_BAD_PIXEL<sp/>5000</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TOMATOCLASSIFICATION_FUNCTION_H</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TOMATOCLASSIFICATION_FUNCTION_H</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="function_8h_1ab403cdaa778201fccc138f0e6ff2255f" kindref="member">SegmentImage</ref>(Mat<sp/>LabImage_8UC3,<sp/>Mat<sp/>&amp;segImage_8U,<sp/><ref refid="color_profile_8h_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">Color</ref><sp/>&amp;colorID);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">vector&lt;Point&gt;<sp/><ref refid="function_8h_1aedb55be6893890e03c2775a993eb17c2" kindref="member">detectROI</ref>(Mat<sp/>segImage);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">Size2i<sp/><ref refid="function_8h_1aedfc53e08b37cc8ccaf4c705a7c701f1" kindref="member">calculateSize</ref>(vector&lt;Point&gt;<sp/>ROI);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">Mat<sp/><ref refid="function_8h_1ae8d4c04b6c18c68c18dc8b1518d86a54" kindref="member">createMask</ref>(Size<sp/>sizeOfMask,<sp/>vector&lt;Point&gt;<sp/>ROI);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="function_8h_1ae4879e9efbf23c4fdcb7a24f7a2e3cbb" kindref="member">countBadPixel</ref>(Mat<sp/>LabImage,<sp/>Mat<sp/>maskImage);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4" kindref="member">STATUS</ref><sp/><ref refid="function_8h_1a742665d7d95453ad56253ee8091c7963" kindref="member">gradeTomato</ref>(<ref refid="color_profile_8h_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">Color</ref><sp/>colorID,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nOfBadPixels);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="function_8h_1a4ac12e3e318d9cea7de43fdd378aec28" kindref="member">showInfo</ref>(Size2i<sp/>sizeOfTomato,<sp/><ref refid="function_8h_1a32c27cc471df37f4fc818d65de0a56c4" kindref="member">STATUS</ref><sp/>grade);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">Mat<sp/><ref refid="function_8h_1a1d36cded4b486b32db5ae04d3c01eeff" kindref="member">runOnImage</ref>(Mat<sp/>srcImage);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="function_8h_1ab0c510222687826611917eb843e29187" kindref="member">runOnCamera</ref>(VideoCapture<sp/>camera);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//TOMATOCLASSIFICATION_FUNCTION_H</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Henry/Documents/GitHub/tomato_classification/function.h"/>
  </compounddef>
</doxygen>
